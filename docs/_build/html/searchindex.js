Search.setIndex({"docnames": ["index", "src", "src.models", "src.processing_forecasts"], "filenames": ["index.rst", "src.rst", "src.models.rst", "src.processing_forecasts.rst"], "titles": ["Welcome to ts_forecaster\u2019s documentation!", "src package", "Models", "Processing forecasts"], "terms": {"i": [0, 2, 3], "time": [0, 1, 2, 3], "seri": [0, 1, 2, 3], "librari": 0, "design": 0, "provid": [0, 2, 3], "multipl": [0, 3], "forecast": [0, 1, 2], "approach": [0, 3], "It": [0, 3], "offer": [0, 1, 3], "variou": 0, "model": [0, 1, 3], "algorithm": [0, 2, 3], "analyz": 0, "froecast": [], "well": [0, 3], "addit": 0, "tool": [0, 2], "thi": [0, 2, 3], "an": [0, 2, 3], "overview": 0, "instal": 0, "instruct": 0, "usag": [0, 2, 3], "exampl": 0, "src": [0, 2, 3], "packag": 0, "index": 0, "modul": 0, "search": 0, "page": 0, "ts_forecast": 1, "2": [1, 2], "infer": 1, "processing_forecast": [1, 3], "evalu": [1, 2, 3], "improov": [1, 3], "xgboost": 1, "cnn": 1, "gru": 1, "lstm": 1, "sarima": 1, "var": 1, "submodul": 1, "ensemble_learn": 3, "metric": 1, "multi_objective_optim": 3, "class": [2, 3], "df": [2, 3], "target": [2, 3], "test_siz": 2, "sourc": [2, 3], "base": [2, 3], "object": [1, 2], "creat": 2, "attribut": [2, 3], "panda": [2, 3], "datafram": [2, 3], "column": [2, 3], "str": [2, 3], "name": [2, 3], "float": 2, "percentag": [2, 3], "size": [2, 3], "test": 2, "set": 2, "from": [2, 3], "0": [2, 3], "1": [2, 3], "fit": 2, "help": [2, 3], "plot_predict": 2, "predict": [2, 3], "series_to_supervis": 2, "n_in": 2, "n_out": 2, "dropnan": 2, "true": 2, "train_test_split": 2, "data": [2, 3], "n_test": 2, "walk_forward_valid": 2, "xgboost_forecast": 2, "train": [2, 3], "testx": 2, "plot_learning_curves_bool": 2, "fals": 2, "us": [2, 3], "convolut": 2, "neural": 2, "network": 2, "bool": 2, "boolean": 2, "plot": 2, "learn": [1, 2], "curv": [2, 3], "default": 2, "create_model": 2, "custom_model": 2, "By": [2, 3], "ha": 2, "layer": 2, "max": 2, "pool": 2, "flatten": 2, "dens": 2, "output": 2, "The": [2, 3], "compil": 2, "adam": 2, "optim": [1, 2], "mean": [2, 3], "squar": [2, 3], "error": [2, 3], "loss": 2, "function": 2, "howev": 2, "you": [2, 3], "can": [2, 3], "defin": [2, 3], "your": 2, "own": 2, "architectur": 2, "sequenti": [2, 3], "kera": 2, "new_data": 2, "plot_learning_curv": 2, "histori": 2, "train_test_set": 2, "epoch": 2, "200": 2, "batch_siz": 2, "30": 2, "gate": 2, "recurr": 2, "unit": 2, "3": 2, "long": 2, "short": 2, "term": 2, "memori": 2, "type": [2, 3], "method": [2, 3], "call": 2, "new": [2, 3], "v": 2, "actual": [2, 3], "valu": [2, 3], "split": 2, "time_seri": 2, "test_size_prct": 2, "p": 2, "d": 2, "q": 2, "m": 2, "implement": [2, 3], "absolut": [2, 3], "plot_result": 2, "model_fit": 2, "result": [2, 3], "run": 2, "max_lag": 2, "paramet": [2, 3], "int": [2, 3], "maximum": [2, 3], "number": [2, 3], "lag": 2, "return": [2, 3], "origin": 2, "_simul": 2, "remark": 2, "multivari": 2, "all": [2, 3], "In": [2, 3], "fact": 2, "appli": 2, "other": [2, 3], "extract_var_equ": 2, "results_param": 2, "extract": 2, "equat": 2, "extract_var_result": 2, "analysi": 2, "select": 2, "statist": 2, "main": 2, "arg": 2, "same": 2, "don": 2, "t": 2, "forget": 2, "add": 2, "row": [2, 3], "befor": 2, "first": 2, "want": 2, "sinc": 2, "we": 2, "get_lag_seri": 2, "col": 2, "arrai": [2, 3], "element": 2, "delai": 2, "run_var": 2, "initialis": 2, "validation_data": 3, "emb": 3, "ensembl": [1, 2], "bag": 3, "boost": [2, 3], "stack": 3, "take": [], "follow": [], "argument": [], "list": 3, "target_valu": 3, "calculate_overlay_percentages_multi": 3, "max_percentag": 3, "min_percentag": 3, "step": [2, 3], "calcul": 3, "overlai": 3, "dict": 3, "dictionari": 3, "kei": 3, "ar": [2, 3], "np": 3, "rang": 3, "minimum": 3, "mae": 3, "mape": 3, "mase": 3, "scale": 3, "overlay_dx": 3, "x": 3, "y": 3, "none": 3, "comput": 3, "where": 3, "differ": 3, "between": [2, 3], "less": 3, "than": 3, "equal": 3, "overlay_dx_moo": 3, "forecasts_df": 3, "multi": 1, "overlay_dx_visualisation_df": 3, "pd": 3, "rmse": 3, "root": 3, "spikes_cov": 3, "proport": 3, "local": 3, "extrem": 3, "cover": 3, "testevalu": 3, "methodnam": 3, "runtest": 3, "testcas": 3, "test_evalu": 3, "process": 1, "myproblem": 3, "forecasts_col": 3, "target_col": 3, "max_evalu": 3, "problem": 3, "three": 3, "minim": 3, "maxim": 3, "overlay_dx_scor": 3, "find": 3, "best": 3, "weight": 3, "averag": [2, 3], "accord": 3, "how": 3, "work": 3, "http": 3, "platypu": 3, "readthedoc": 3, "io": 3, "en": 3, "latest": 3, "get": 3, "start": 3, "html": 3, "num_vari": 3, "variabl": 3, "solut": 3, "mae_loss_funct": 3, "overlay_dx_gain_funct": 3, "rmse_loss_funct": 3, "find_best_weight": 3, "decis": [2, 3], "tree": [2, 3], "machin": 2, "gradient": [2, 3], "framework": 2, "simplifi": 2, "version": 2, "also": 2, "rnn": 2, "depend": 2, "sequenc": 2, "season": 2, "auto": 2, "regress": 2, "integr": 2, "moov": 2, "srima": 2, "extens": 2, "arima": 2, "support": 2, "direct": 2, "compon": 2, "vector": 2, "when": 2, "two": 2, "more": [2, 3], "influenc": 2, "each": [2, 3], "contain": 3, "mertic": 3, "descript": 3, "score": 3, "associ": 3, "visualis": 3, "better": 3, "understand": 3, "perform": 3, "our": 3, "consist": 3, "sever": 3, "measur": 3, "which": 3, "draw": 3, "interv": 3, "around": 3, "fall": 3, "within": 3, "reduc": 3, "its": 3, "A": 3, "77": 3, "repres": 3, "align": 3, "threshold": 3, "indic": 3, "achiev": 3, "possibl": 3, "perfect": 3, "would": 3, "occur": 3, "reflect": 3, "overal": 3, "accuraci": 3, "rel": 3, "ideal": 3, "scenario": 3, "higher": 3, "while": 3, "lower": 3, "suggest": 3, "larger": 3, "deviat": 3, "visual": 3, "advantag": 3, "allow": 3, "quick": 3, "assess": 3, "observ": 3, "easili": 3, "identifi": 3, "signific": 3, "point": 3, "area": 3, "improv": 3, "unlik": 3, "impact": 3, "outlier": 3, "comprehens": 3, "view": 3, "summari": 3, "intuit": 3, "concis": 3, "wai": 3, "insight": 3, "across": 3, "highlight": 3, "regard": 3, "import": [2, 3], "xgboost_model": 2, "pred": 2, "cnn_model": 2, "numpi": [2, 3], "gru_model": 2, "shape": 2, "should": 2, "n_sampl": 2, "n_timestep": 2, "n_featur": 2, "lstm_model": 2, "input": 2, "order": 2, "part": 2, "ma": 2, "period": 2, "sarima_model": 2, "var_model": 2, "independ": 3, "subset": 3, "combin": 3, "through": 3, "vote": 3, "random": 3, "forest": 3, "attempt": 3, "correct": 3, "made": 3, "previou": 3, "characterist": 3, "meta": 3, "regressor": 3, "valid": 3, "bagged_forecast": 3, "boosted_forecast": 3, "stacked_forecast": 3, "aera": 3, "100": 3, "best_weight": 3, "best_result": 3}, "objects": {"models": [[2, 0, 0, "-", "XGBoost"], [2, 0, 0, "-", "cnn"], [2, 0, 0, "-", "gru"], [2, 0, 0, "-", "lstm"], [2, 0, 0, "-", "sarima"], [2, 0, 0, "-", "var"]], "models.XGBoost": [[2, 1, 1, "", "xgboost"]], "models.XGBoost.xgboost": [[2, 2, 1, "", "df"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "help"], [2, 3, 1, "", "plot_predictions"], [2, 3, 1, "", "series_to_supervised"], [2, 2, 1, "", "target"], [2, 2, 1, "", "test_size"], [2, 3, 1, "", "train_test_split"], [2, 3, 1, "", "walk_forward_validation"], [2, 3, 1, "", "xgboost_forecast"]], "models.cnn": [[2, 1, 1, "", "cnn"]], "models.cnn.cnn": [[2, 3, 1, "", "create_model"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "forecast"], [2, 3, 1, "", "plot_learning_curves"], [2, 3, 1, "", "plot_predictions"], [2, 3, 1, "", "train_test_sets"]], "models.gru": [[2, 1, 1, "", "gru"]], "models.gru.gru": [[2, 3, 1, "", "create_model"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "forecast"], [2, 3, 1, "", "plot_learning_curves"], [2, 3, 1, "", "plot_predictions"], [2, 3, 1, "", "train_test_sets"]], "models.lstm": [[2, 1, 1, "", "lstm"]], "models.lstm.lstm": [[2, 3, 1, "", "create_model"], [2, 2, 1, "", "df"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "forecast"], [2, 3, 1, "", "plot_learning_curves"], [2, 2, 1, "", "plot_learning_curves_bool"], [2, 3, 1, "", "plot_predictions"], [2, 2, 1, "", "target"], [2, 2, 1, "", "test_size"], [2, 3, 1, "", "train_test_sets"]], "models.sarima": [[2, 1, 1, "", "sarima"]], "models.sarima.sarima": [[2, 3, 1, "", "evaluate"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "help"], [2, 3, 1, "", "plot_results"], [2, 3, 1, "", "run"]], "models.var": [[2, 1, 1, "", "var"]], "models.var.var": [[2, 3, 1, "", "extract_var_equations"], [2, 3, 1, "", "extract_var_results"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "forecast"], [2, 3, 1, "", "get_lag_series"], [2, 3, 1, "", "plot_predictions"], [2, 3, 1, "", "run_var"]], "processing_forecasts": [[3, 0, 0, "-", "ensemble_learning"], [3, 0, 0, "-", "metrics"], [3, 0, 0, "-", "multi_objective_optimization"]], "processing_forecasts.ensemble_learning": [[3, 1, 1, "", "ensemble_learning"]], "processing_forecasts.ensemble_learning.ensemble_learning": [[3, 3, 1, "", "bagging"], [3, 3, 1, "", "boosting"], [3, 3, 1, "", "stacking"]], "processing_forecasts.metrics": [[3, 1, 1, "", "Evaluate"], [3, 1, 1, "", "TestEvaluate"]], "processing_forecasts.metrics.Evaluate": [[3, 3, 1, "", "calculate_overlay_percentages_multi"], [3, 3, 1, "id0", "evaluate"], [3, 3, 1, "id1", "mae"], [3, 3, 1, "id2", "mape"], [3, 3, 1, "id3", "mase"], [3, 3, 1, "", "overlay_dx"], [3, 3, 1, "", "overlay_dx_moo"], [3, 3, 1, "id4", "overlay_dx_visualisation_df"], [3, 3, 1, "id5", "rmse"], [3, 3, 1, "id6", "spikes_covering"]], "processing_forecasts.metrics.TestEvaluate": [[3, 3, 1, "", "test_evaluate"]], "processing_forecasts.multi_objective_optimization": [[3, 1, 1, "", "MyProblem"], [3, 4, 1, "", "find_best_weights"]], "processing_forecasts.multi_objective_optimization.MyProblem": [[3, 2, 1, "", "df"], [3, 3, 1, "", "evaluate"], [3, 2, 1, "", "forecasts"], [3, 3, 1, "", "mae_loss_function"], [3, 3, 1, "", "overlay_dx_gain_function"], [3, 3, 1, "", "rmse_loss_function"], [3, 2, 1, "", "target_values"]], "": [[1, 0, 0, "-", "src"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "titleterms": {"welcom": 0, "ts_forecast": 0, "": 0, "document": 0, "indic": 0, "tabl": 0, "src": 1, "packag": 1, "subpackag": 1, "model": 2, "xgboost": 2, "cnn": 2, "gru": 2, "lstm": 2, "sarima": 2, "var": 2, "processing_forecast": [], "submodul": 3, "ensemble_learn": [], "modul": [], "metric": 3, "multi_objective_optim": [], "process": 3, "forecast": 3, "ensembl": 3, "learn": 3, "multi": 3, "object": 3, "optim": 3}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Welcome to ts_forecaster\u2019s documentation!": [[0, "welcome-to-ts-forecaster-s-documentation"]], "Documentation:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "src package": [[1, "src-package"]], "Subpackages": [[1, "subpackages"]], "Models": [[2, "models"]], "XGBoost": [[2, "module-models.XGBoost"]], "CNN": [[2, "module-models.cnn"]], "GRU": [[2, "module-models.gru"]], "LSTM": [[2, "module-models.lstm"]], "SARIMA": [[2, "module-models.sarima"]], "VAR": [[2, "module-models.var"]], "Processing forecasts": [[3, "processing-forecasts"]], "Submodules": [[3, "submodules"]], "ensemble learning": [[3, "module-processing_forecasts.ensemble_learning"]], "metrics": [[3, "module-processing_forecasts.metrics"]], "multi objective optimization": [[3, "module-processing_forecasts.multi_objective_optimization"]]}, "indexentries": {"module": [[1, "module-src"], [3, "module-processing_forecasts.ensemble_learning"], [3, "module-processing_forecasts.metrics"], [3, "module-processing_forecasts.multi_objective_optimization"]], "src": [[1, "module-src"]], "evaluate (class in processing_forecasts.metrics)": [[3, "processing_forecasts.metrics.Evaluate"]], "myproblem (class in processing_forecasts.multi_objective_optimization)": [[3, "processing_forecasts.multi_objective_optimization.MyProblem"]], "testevaluate (class in processing_forecasts.metrics)": [[3, "processing_forecasts.metrics.TestEvaluate"]], "bagging() (processing_forecasts.ensemble_learning.ensemble_learning method)": [[3, "processing_forecasts.ensemble_learning.ensemble_learning.bagging"]], "boosting() (processing_forecasts.ensemble_learning.ensemble_learning method)": [[3, "processing_forecasts.ensemble_learning.ensemble_learning.boosting"]], "calculate_overlay_percentages_multi() (processing_forecasts.metrics.evaluate method)": [[3, "processing_forecasts.metrics.Evaluate.calculate_overlay_percentages_multi"]], "df (processing_forecasts.multi_objective_optimization.myproblem attribute)": [[3, "processing_forecasts.multi_objective_optimization.MyProblem.df"]], "ensemble_learning (class in processing_forecasts.ensemble_learning)": [[3, "processing_forecasts.ensemble_learning.ensemble_learning"]], "evaluate() (processing_forecasts.metrics.evaluate method)": [[3, "id0"], [3, "processing_forecasts.metrics.Evaluate.evaluate"]], "evaluate() (processing_forecasts.multi_objective_optimization.myproblem method)": [[3, "processing_forecasts.multi_objective_optimization.MyProblem.evaluate"]], "find_best_weights() (in module processing_forecasts.multi_objective_optimization)": [[3, "processing_forecasts.multi_objective_optimization.find_best_weights"]], "forecasts (processing_forecasts.multi_objective_optimization.myproblem attribute)": [[3, "processing_forecasts.multi_objective_optimization.MyProblem.forecasts"]], "mae() (processing_forecasts.metrics.evaluate method)": [[3, "id1"], [3, "processing_forecasts.metrics.Evaluate.mae"]], "mae_loss_function() (processing_forecasts.multi_objective_optimization.myproblem method)": [[3, "processing_forecasts.multi_objective_optimization.MyProblem.mae_loss_function"]], "mape() (processing_forecasts.metrics.evaluate method)": [[3, "id2"], [3, "processing_forecasts.metrics.Evaluate.mape"]], "mase() (processing_forecasts.metrics.evaluate method)": [[3, "id3"], [3, "processing_forecasts.metrics.Evaluate.mase"]], "overlay_dx() (processing_forecasts.metrics.evaluate method)": [[3, "processing_forecasts.metrics.Evaluate.overlay_dx"]], "overlay_dx_gain_function() (processing_forecasts.multi_objective_optimization.myproblem method)": [[3, "processing_forecasts.multi_objective_optimization.MyProblem.overlay_dx_gain_function"]], "overlay_dx_moo() (processing_forecasts.metrics.evaluate method)": [[3, "processing_forecasts.metrics.Evaluate.overlay_dx_moo"]], "overlay_dx_visualisation_df() (processing_forecasts.metrics.evaluate method)": [[3, "id4"], [3, "processing_forecasts.metrics.Evaluate.overlay_dx_visualisation_df"]], "processing_forecasts.ensemble_learning": [[3, "module-processing_forecasts.ensemble_learning"]], "processing_forecasts.metrics": [[3, "module-processing_forecasts.metrics"]], "processing_forecasts.multi_objective_optimization": [[3, "module-processing_forecasts.multi_objective_optimization"]], "rmse() (processing_forecasts.metrics.evaluate method)": [[3, "id5"], [3, "processing_forecasts.metrics.Evaluate.rmse"]], "rmse_loss_function() (processing_forecasts.multi_objective_optimization.myproblem method)": [[3, "processing_forecasts.multi_objective_optimization.MyProblem.rmse_loss_function"]], "spikes_covering() (processing_forecasts.metrics.evaluate method)": [[3, "id6"], [3, "processing_forecasts.metrics.Evaluate.spikes_covering"]], "stacking() (processing_forecasts.ensemble_learning.ensemble_learning method)": [[3, "processing_forecasts.ensemble_learning.ensemble_learning.stacking"]], "target_values (processing_forecasts.multi_objective_optimization.myproblem attribute)": [[3, "processing_forecasts.multi_objective_optimization.MyProblem.target_values"]], "test_evaluate() (processing_forecasts.metrics.testevaluate method)": [[3, "processing_forecasts.metrics.TestEvaluate.test_evaluate"]]}})